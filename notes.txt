
o) at the moment when the cursor hovers over a draggable item it is
   CSS'd according to static CSS. For example
      .wip .kanban.story-is-done:hover
          border-color drag_drop_border_color
          border-style solid
          cursor move
   However, suppose you are playing in pull mode and there is no
   empty pull-request kanban in the downstream portal on which to
   drag the done kanban. This suggests there might be a way of
   deciding whether a dom element is draggable dynamically.
   http://stackoverflow.com/questions/10618159/how-to-properly-bind-jquery-ui-behaviors-in-meteor
   http://minitrello.meteor.com/
   http://jqueryui.com/sortable/

o) drag-drop no longer works on dashboard. Make this a feature?
   Nice for demos though... Not sure.

o) when very few kanbans in portals and wip then dice can extend
   the width of the team board so that the portals do not align.

o) just occured to me that since only the 1 is shown I don't really need to
   limit the size of the kanban to 6. There's no reason I can't have kanban
   of any size.

o) suppose there is an empty kanban pull request in the downstream portal
   of size 5. Can you drag a done kanban (from the wip area) of size 1
   onto this? And then one of size 2. And then another one of size 2.
   And then its fulfilled and the transfer happens?

o) in Push mode dragging a done wip.kanban will higlight the downstream portal.
   in Pull mode dragging a done wip.kanban will highlight any empty
   pull-request kanbans in the downstream portal, but not the downstream portal
   itself. This could be confusing. It leads me to think I would be better
   having either push mode or pull mode but not both. I think this ties in
   with the idea of the game being about learning. Playing first in push
   mode and then in pull mode creates the greatest contrast.

o) can the crosshair cursor (drag/drop) be positioned right in the center
   of the die's dot?
   
o) Starting to get an idea of how pull mode will work end to end.
   Each team has an allocation (limit) of _empty_ kanbans. They live in
   the middle wip area. They can signal a pull request by dropping an
   empty kanban into the upstream portal. When it comes back it will
   be filled up with "holes", meaning it will have a story in it.
   The kanban with its story can then be dragged onto the teams wip
   area. There it can be worked on by dragging [1]s onto it.
   When it is done. It cannot be dragged onto the downstream portal.
   It can only be dragged on top of an empty kanban request from
   the downstream team, waiting in this teams downstream portal.
   On releasing the drag, the story is xferred onto the empty
   kanban on the downstream portal, which then teleports to the
   downstream teams upstream portal (and it is once again an empty story).
   The emptied kanban is now in this teams dowstream portal. From there
   it can be dragged back into this teams wip area, and from there back
   onto this teams upstream portal to signal a pull.
   Is there any scope for starting in a similar way in push mode?

o) At first I thought that running droppables(event) inside
   the start: (as opposed to drag:) would mean that if a kanban arrived
   in the upstream portal while you are dragging a [1] then it would not
   be highlit. However, it wouldn't anyway, since it (the kanban) needs to
   be dragged onto the wip area before the [1] can be applied to it.
   However, there could be another combination which has this concurrency
   issue. And besides, it's not really an issue. It's what is actually
   happening to the player!

o) recoding historic events on a kanban is easy. I can add them in the
   html but make it invisible. And it appears in a popup tooltip.
   
o) finding a bug. I can make the visual appearance of this using
   a mini graphic which attaches to the bottom right of the story.
   A bit like in LeanKit that Absolute are using.
   
o) age of a kanban can be shown using a colour-gradient in CSS.

o) When a Kanban is moved downstream I don't want it to disrupt the
   display of the downstream team too much. The code right now _does_
   disrupt them because the new Kanban appears as the first entry.
   This is because of the db.update() not having a sort option.
   Think it through... A -> B -> C  all Stories have to start at
   A (in theory anyway). So when A moves to B it's likely to be newer
   than any Story already in B. So newer _ids appear before older _ids.
   Reversing the order should help. Viz
      _.each(stories.reverse(), function(story,index) {
        if (index % 4 == n) {
          quarters.push(story);
        }
      });
   However, another option is that the xferred kanban could appear
   _in_ the downstream team's upstream portal!
   Quite like this. More more transparent. Nice symmetry with empty
   kanban's going upstream to signal a pull.
   In fact, when B drop an an empty kanban on B's upstream portal
   it could appear in A's downstream portal.
   Complete symmetry!
   But is this just delaying... What about when the downstream team
   drags the new kanban from their upstream portal onto the board?

o) Looking at the dashboard, it would be nice if the appearance of
   A's downstream portal matches B's upstream portal. How about
   hatch shading them both in both colors?
   See http://lea.verou.me/demos/css3-patterns.html
   No. Too complicated. How about inside the portal just have a
   ladder of divs than form rungs of opposite colours!
   How would the kanbans appear on that? float:?

o) How to do [split]
   Have a split button that is enabled when a [1] is available.
   This can be dragged over the kanban you would like to split!

o) Don't have to give different numbers of dice to different teams.
   Can bias the dice so later teams have slightly less chance of getting a [1]!

o) Make the mini-logo that appears in the browser tab be a [o] via a dice 1
   in the color of that team.
   http://stackoverflow.com/questions/260857/changing-website-favicon-dynamically

o) Put CSS entries inside a rule in alphaetical order?

o) Will [start] button eventually need to go to a setup page?
   eg push, pull defaults
   eg initial allocation of dice
   eg wip limits
   eg allow splitting
   eg allow dice sharing

o) Nothing showing up in Opera

o) I just figured out a nice way to do dice teleporting.
   When a team teleports a dice, they also lose a dice.
   When an incoming teleported dice is the same colour as
   the team receiving it they get the dice back!
   Now I can simply allow any [1] of any colour to be used
   to do [1] unit of work on a story! Love it.
   
o) Extension to the above idea. Above the dice have a dice-pool.
   The dice pool is visible to all Teams.
   Dropping one of your dice into that pool means that you lose one of your dice.
   Pulling one of your dice from the dice-pool means you get the lost dice back.
   Thus dice have their own "teleport-pool" and kanbans have their own separate
   teleports.
   This would be interesting as it would create a shared resource that
   all teams could see. Thus there could be concurrency issues.
   Suppose two teams try to drag a dice into their playing area
   at the same time.

o) How about making the downstream portal have potentially two colours.
   How... perhaps make both portals have the same background and use
   a container div so I can effectively get two colors on the border.
   In dashed style this should be quite visible.
   Perhaps add someindication of which is upstream portal and which
   is downstream portal if both have same background?
   ...
   If pushing is [on] for this team, the teams own color is present on their
   downstream portal.
   If the downstream team has pulling [on], their color is also present
   on this teams portal.
   What about the upstream portal?
   If the upstream team has pushing [on], their colour is present on this
   teams upstream portal.
   If pulling is [on] for this team, the teams own color is present on their
   upstream portal.
   Does this mean that flow could be blocked in both direction at a portal?
   I guess so! But that's ok. More self-organizing fodder.

o) When a [1] is being dragged, instead of highlighting the target kanban
   I could highlight they target _hole_ it will drop into. Or perhaps
   highlight both.

o) The act of pushing a done story through a portal could be the event
   that causes automatic error [bug] checking to take place.

o) What to do if one of the teams (egdes) has to retire?
   Have a resume button.

o) Use http://arunoda.github.io/laika/   test framework.

o) Make done-one and todo-one have same fixed size as a dice-one
   drop width of wip
   
o) Each game needs to somehow have [pull][push] options?
   Or should I put that on _each_ Edge?!
   I like that.
   Does it creates a conflict? Suppose red feeds orange.
   If orange cannot pull [cannot pass empty kanban of their color upstream]
   and red cannot push [cannot pass full kanban of their color downstream]
   Does this mean no stories will ever pass from red to orange?
   I don't think so.
   red pushing is not the exact mirror of orange pulling.
   red pushing is about what red can do.
   orange pulling is about what orange can do.
   
o) Simpler version of splitting (below).
   When you split a kanban you
   1. are in a controlled sandbox...
   2. put all the kanban's done-one's back as dice
      these dice do not go back to the top of the edge,
      they remain inside the sandbox, usable only in the sandbox
   3. split the empty kanban - much simpler - fewer choices
   4. now the player can play the sandboxed 1s back onto
      the split kanban in any combination they want.
   
o) Drop story onto a split-area to split it
   this will offer selection of possibilities. click to select
   eg story 4-7
      options are
          1-7 and 3-7
          2-7 and 2-7
      no that's not right because there is twice the amount of work
      4-7 options are
          1-1=done and 3-6       2-2=done  and  2-5
          1-2 and 3-5            2-3       and  2-4
          1-3 and 3-4            2-4       and  2-3=same as 2-3 2-4
          1-4 and 3-3=done       2-5       and  2-2=same as 2-2 2-5
          1-5 and 3-2=illegal    2-6       and  2-1=illegal
          that's it for 4 since only splits are 1-3 and 2-2
          
   there is another possibility... split to create an empty tray!
   (useful for a pull)
      4-7
          0-1 and 4-6
          0-2 and 4-5
          0-3 and 4-4
   
o) Is there a way to make the physical appearance of a story proportional
   to its size? This would make a very effective visualization.
   If the kanban were also proportional it would clearly visualize the idea
   that only a story of the same (or smaller) size can be put into the kanban.
   I like this idea. Tried it. Works ok, but it creates vertical space pressure.
   So how about extending the width of the wip area so several kanban can appear
   in a row.

o) And wip limits can go on each Edge too.
   Can have two kinds of wip constraint.
      Number of trays.
      Total of of tray sizes.
   Very self-organizing!
   This does not cater for an overall wip limit for the whole board though.
   I was thinking this (overall wip limit for the whole board, conwip) would
   be an option visible on a _separate_ single config page, shared by all the
   edges. But how about the option being duplicated on _each_ edges
   config page/tab! Simpler. More self-organizing too.
   If a player uses this control to reduce the conwip what effect does this
   actually have? Which kanbans jettisoned/abandoned/shrunk?
   
o) maybe have squares of red/orange/blue/green (in that order) below the
   [start game] button so you can see how many teams have joined. And make it
   a bit more colourful.

o) create initial stories when game is created.
   need to make a snapshot of the initial edge state. My idea is that events
   will be stored in an events collection each with a timestamp. The original
   board could then be used to replay the events in a review.
   And the events could be used to create a dashboard.
   Events are created on clients. How do I know their clocks are synchronized?
   I don't. So don't use clocks. Use tick data that is held in collection.
   How to update it? From the server. In which case it might as well be a
   time stamp!
   
o) backlog as a team which have dice too?
   They have no upstream.
   And new stories are automatically added.
   Or... they _do_ have an upstream, but when they pull from it, it always succeeds immediately.
   But what if they are in push only mode?
   How about they have dice and a [new story] button which they can use to create
   a new story at any time (a [1] is not required). Size comes back at random.
   They then need to do size lots of 1s on it before it can be sent downstream.
   I like this. But how does it relate to kanban limits?
   How about the backlog area does not behave like a portal. Instead it just has
   a magically auto-updating collection of stories.
   And the [new story] button becomes a [new kanban] button (which is only enabled
   if the wip is below the limit). Clicking it creates a new _empty_ kanban (of a
   certain size) which they can they use to drag stories from the backlog onto.
   Could have different buttons for creating different sized kanbans.

o) no done? except on dashboard? or last colour?

o) drop [1] onto a story to do work on that story.
   capture in jQuery and update the Meteor collection directly.

o) drop [1] onto [unused] area to enable you to reroll the dice
   I like this. If days are not tied edge to edge then a team with an unusable [1]
   have a choice of losing the [1] or waiting for a story to arrive!
          
o) make maximum size of a story/tray 6 to match the sides on a dice
   and to reduce the number of split options that need to be presented.
   
o) how does the tray it is in split?
    size of story must be less than or equal to the size of the tray
    so I can create a deterministic algorithm for this.
    
o) drop an empty tray onto split-area to split it
   again this shows the options and you click on one of them to select it

o) don't synchronize the 'days' ?
   each edge can rethrow dice as often as it likes (but these are recorded).
   In other words, the time periods would be real time periods. One minute say.
   I like this idea. What would happen. Would the edges naturally "equalize"?
   It would also mean that the dashboard could attempt to show the moment an
   event took place by placing it at the relevant horizontal position.
   If a 1 was worked, a 1 could appear in its colour.
   It a story was finished. The story could appear in its kanban.
   How to show portal movement?
   How to show 1 being discarded?
   How to show dice being rolled?
   
o) option to have a single tray colour!?

o) crucial point is that different edges will have different numbers of dice.
   make earlier teams have more dice, later teams have fewer dice.
   
o) allow dice to be dropped into portals too?

o) make the kanban/stories get darker as they get older.

o) make a cumulative-flow-diagram where the kanban from all edges
   are stacked vertically on top of each other. Because each kanban's height
   is proportional to their size the greater the wip the greater the height
   of each 'column'. What is a column? What unit is that? I think if the
   rolling of each team is not synchronized (other than via the natural flow
   of work) then it has to be actual elapsed time.
   
o) tool-tip for a kanban shows its history in a graph.

o) dashboard display can be live and reactive.
   Just shows view of all the teams.
   Since it is reactive can be used for demos too :-)
   
o) cumulative-flow-diagram
   Different kind of dashboard.
   Like cyber-dojo I will need some way to limit the horizontal space.
   There are a couple of aspects/layouts for dashboard.
   During the game I can just show all the edges without the portals.
   For charts used in the retrospective I'd like a horizontal scroll-bar that
   acts as a time-slider (perhaps with << < > >> controls for controlled movement).
   Sliding the control jumps in time. The idea is that there isn't a diff-style
   display, the difference is more that you're seeing the chart one moment and the
   next you're seeing it an instant later and your memory of the previous one
   allows your brain to form the diff. Much more qualitative than quantitative.

